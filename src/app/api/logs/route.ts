import { NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { z } from "zod";
import type { LogEntry } from "@/types/student";
import { metadata } from "@/app/layout";

// ƒê·ªãnh nghƒ©a schema cho LogEntry
const logEntrySchema = z.object({
  timestamp: z.string(),
  metadata: z.record(z.any()).optional(),
});

// K·∫øt n·ªëi MongoDB
async function getDb() {
  const client = await clientPromise;
  return client.db("student_dashboard").collection("logs");
}

// üìå API l·∫•y danh s√°ch log
export async function GET() {
  try {
    const collection = await getDb();
    const logs = await collection.find({}).toArray();
    return NextResponse.json(logs, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch log:", error);
    return NextResponse.json({ error: "L·ªói khi l·∫•y danh s√°ch log" }, { status: 500 });
  }
}

// üìå API th√™m log (POST)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const parsed = logEntrySchema.safeParse(body);

    if (!parsed.success) {
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }

    const collection = await getDb();
    await collection.insertOne(parsed.data);
    return NextResponse.json({ message: "Th√™m log th√†nh c√¥ng", log: parsed.data }, { status: 201 });
  } catch (error) {
    console.error("L·ªói khi th√™m log:", error);
    return NextResponse.json({ error: "L·ªói khi th√™m log" }, { status: 500 });
  }
}
