import { NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { z } from "zod";
import { addLogEntry } from "@/lib/logging";
// ƒê·ªãnh nghƒ©a schema cho Program
const programSchema = z.object({
  id: z.string(),
  name: z.string(),
  faculty: z.string(),
});

// K·∫øt n·ªëi MongoDB
async function getDb() {
  const client = await clientPromise;
  return client.db("student_dashboard").collection("programs");
}

// üìå API l·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh h·ªçc
export async function GET() {
  try {
    const collection = await getDb();
    const programs = await collection.find({}).toArray();
    return NextResponse.json(programs, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh h·ªçc:", error);
    await addLogEntry({
      message: "L·ªói khi l·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi l·∫•y danh s√°ch ch∆∞∆°ng tr√¨nh h·ªçc" }, { status: 500 });
  }
}

// üìå API th√™m ch∆∞∆°ng tr√¨nh h·ªçc (POST)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const parsed = programSchema.safeParse(body);

    if (!parsed.success) {
      await addLogEntry({
        message: "Th√™m ch∆∞∆°ng tr√¨nh h·ªçc kh√¥ng h·ª£p l·ªá",
        level: "warn",
      });
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }

    const collection = await getDb();
    await collection.insertOne(parsed.data);
    const programs = await collection.find({}).toArray();
    await addLogEntry({
      message: "Th√™m ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "info",
      action: "create",
      entity: "system",
      user: "admin",
      details: "Add new program: " + parsed.data.name,
    });

    return NextResponse.json({ message: "Th√™m ch∆∞∆°ng tr√¨nh h·ªçc th√†nh c√¥ng", programs: programs }, { status: 201 });
  } catch (error) {
    console.error("L·ªói khi th√™m ch∆∞∆°ng tr√¨nh h·ªçc:", error);
    await addLogEntry({
      message: "L·ªói khi th√™m ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi th√™m ch∆∞∆°ng tr√¨nh h·ªçc" }, { status: 500 });
  }
}

// üìå API c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc (PUT)
export async function PUT(req: Request) {
  try {
    const body = await req.json();
    const parsed = programSchema.safeParse(body);

    if (!parsed.success) {
      await addLogEntry({
        message: "C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc kh√¥ng h·ª£p l·ªá",
        level: "warn",
      });
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }

    const collection = await getDb();
    await collection.updateOne({ id: parsed.data.id }, { $set: parsed.data });
    const programs = await collection.find({}).toArray();
    await addLogEntry({
      message: "C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "info",
      action: "update",
      entity: "system",
      user: "admin",
      details: "Updated program: " + parsed.data.name,
    });
    return NextResponse.json({ message: "C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc th√†nh c√¥ng", programs: programs }, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc:", error);
    await addLogEntry({
      message: "L·ªói khi c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc" }, { status: 500 });
  }
}

// üìå API x√≥a ch∆∞∆°ng tr√¨nh h·ªçc (DELETE)
export async function DELETE(req: Request) {
  try {
    const { id } = await req.json();
    if (!id) {
      await addLogEntry({
        message: "ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        level: "warn",
      });
      return NextResponse.json({ error: "ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" }, { status: 400 });
    }

    const collection = await getDb();
    await collection.deleteOne({ id });
    const programs = await collection.find({}).toArray();

    await addLogEntry({
      message: "X√≥a ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "info",
      action: "delete",
      entity: "system.",
      user: "admin",
      details: "Deleted program: " + id,
    });


    return NextResponse.json({ message: "X√≥a ch∆∞∆°ng tr√¨nh h·ªçc th√†nh c√¥ng", programs: programs }, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi x√≥a ch∆∞∆°ng tr√¨nh h·ªçc:", error);
    await addLogEntry({
      message: "L·ªói khi x√≥a ch∆∞∆°ng tr√¨nh h·ªçc",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi x√≥a ch∆∞∆°ng tr√¨nh h·ªçc" }, { status: 500 });
  }
}