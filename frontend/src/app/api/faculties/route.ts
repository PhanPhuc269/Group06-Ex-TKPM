import { NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { z } from "zod";
import { addLogEntry } from "@/lib/logging";

// ƒê·ªãnh nghƒ©a schema cho Faculty
const facultySchema = z.object({
  id: z.string(),
  name: z.string(),
});

// K·∫øt n·ªëi MongoDB
async function getDb() {
  const client = await clientPromise;
  return client.db("student_dashboard").collection("faculties");
}
async function isUse(id: string) {
  const client = await clientPromise;
  const collection = client.db("student_dashboard").collection("students");
  const student = await collection.findOne({
    facultyId: id,
  });
  return student ? true : false;
}

// üìå API l·∫•y danh s√°ch khoa
export async function GET() {
  try {
    const collection = await getDb();
    const faculties = await collection.find({}).toArray();
    return NextResponse.json(faculties, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch khoa:", error);
    await addLogEntry({
      
      message: "L·ªói khi l·∫•y danh s√°ch khoa",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi l·∫•y danh s√°ch khoa" }, { status: 500 });
  }
}

// üìå API th√™m khoa (POST)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const parsed = facultySchema.safeParse(body);

    if (!parsed.success) {
      await addLogEntry({
        message: "Th√™m khoa kh√¥ng h·ª£p l·ªá",
        level: "warn",
      });
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }

    const collection = await getDb();
    await collection.insertOne(parsed.data);
    const faculties = await collection.find({}).toArray();
    await addLogEntry({
      message: "Th√™m khoa th√†nh c√¥ng",
      level: "info",
      action: "update",
      entity: "system",
      user: "admin",
      details: "Add new faculty: " + parsed.data.name,
    });
    return NextResponse.json({ message: "Th√™m khoa th√†nh c√¥ng", faculties: faculties }, { status: 201 });
  } catch (error) {
    console.error("L·ªói khi th√™m khoa:", error);
    await addLogEntry({
      message: "L·ªói khi th√™m khoa",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi th√™m khoa" }, { status: 500 });
  }
}

// üìå API c·∫≠p nh·∫≠t khoa (PUT)
export async function PUT(req: Request) {
  try {
    const body = await req.json();
    const parsed = facultySchema.safeParse(body);

    if (!parsed.success) {
      await addLogEntry({
        message: "C·∫≠p nh·∫≠t khoa kh√¥ng h·ª£p l·ªá",
        level: "warn",
      });
      return NextResponse.json({ error: parsed.error.errors }, { status: 400 });
    }

    const collection = await getDb();
    await collection.updateOne({ id: parsed.data.id }, { $set: parsed.data });
    const faculties = await collection.find({}).toArray();
    await addLogEntry({
      message: "C·∫≠p nh·∫≠t khoa th√†nh c√¥ng",
      level: "info",
      action: "update",
      entity: "system",
      user: "admin",
      details: "Update faculty: " + parsed.data.name,
    });
    return NextResponse.json({ message: "C·∫≠p nh·∫≠t khoa th√†nh c√¥ng", faculties: faculties }, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t khoa:", error);
    await addLogEntry({
      message: "L·ªói khi c·∫≠p nh·∫≠t khoa",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi c·∫≠p nh·∫≠t khoa" }, { status: 500 });
  }
}

// üìå API x√≥a khoa (DELETE)
export async function DELETE(req: Request) {
  try {
    const { id } = await req.json();
    if (!id) return NextResponse.json({ error: "ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" }, { status: 400 });

    const collection = await getDb();
    const isUseFaculty = await isUse(id);
    if (isUseFaculty) {
      await addLogEntry({
        message: "Kh√¥ng th·ªÉ x√≥a khoa ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng",
        level: "warn",
      });
      return NextResponse.json({ error: "Kh√¥ng th·ªÉ x√≥a khoa ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng" }, { status: 400 });
    }

    await collection.deleteOne({ id });
    const faculties = await collection.find({}).toArray();
    await addLogEntry({
      message: "X√≥a khoa th√†nh c√¥ng",
      level: "info",
      action: "delete",
      entity: "system",
      user: "admin",
      details: "Delete faculty: " + id,
    });
    return NextResponse.json({ message: "X√≥a khoa th√†nh c√¥ng", faculties: faculties }, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi x√≥a khoa:", error);
    await addLogEntry({
      message: "L·ªói khi x√≥a khoa",
      level: "error",
    });
    return NextResponse.json({ error: "L·ªói khi x√≥a khoa" }, { status: 500 });
  }
}